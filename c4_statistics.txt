C4 Compiler Code Statistics:1. Lines of Code (LOC):   - Total LOC: 495   - LOC per function:     - Function 1 (next063-1680c.c): 85     - Function 2 (expr073-357c.c): 151     - Function 3 (stmt036-4140c.c): 84     - Function 4 (main148-6320c.c): 1752. Cyclomatic Complexity (for each function):   - Function 1 (next063-1680c.c): 91   - Function 2 (expr073-357c.c): 91   - Function 3 (stmt036-4140c.c): 100   - Function 4 (main148-6320c.c): 1003. Number of Functions and Their Sizes:   - Total Functions: 4   - Function Sizes:     - Function 1 (next063-1680c.c): 85 LOC     - Function 2 (expr073-357c.c): 151 LOC     - Function 3 (stmt036-4140c.c): 84 LOC     - Function 4 (main148-6320c.c): 175 LOC4. Global Variables and Their Usage:   - p: Points to the current position in the source code.   - lp: Marks the beginning of the current line (useful for debugging).   - data: Data/bss pointer used for managing dynamic memory.   - e, le: Points to the emitted code and is used for debugging.   - id, sym: Symbol table and identifier tracking.   - tk: Current token being processed.   - ival, ty, loc: Used for handling token values and expression types.   - line: Tracks the current line number in the source code.   - src, debug: Flags to control source code printing and debugging.5. Unique Tokens and Their Frequency:   - Tokens: Num, Fun, Sys, Glo, Loc, Id, Char, Else, Enum, If, Int, Return, Sizeof, While.   - Operators: Assign, Cond, Lor, Lan, Or, Xor, And, Eq, Ne, Lt, Gt, Le, Ge, Shl, Shr, Add, Sub, Mul, Div, Mod, Inc, Dec, Brak.   - To extract frequency, tools like **Cppcheck** or **Lizard** can be used for counting the occurrences of these tokens in the source code.6. Branches, Loops, and Their Nesting Levels:   - Branches:     - If statements: Found in `stmt()` and `expr()`.     - Conditional checks: For example, `if (tk == Assign)` for assignments.   - Loops:     - While loops are present in `stmt()` and `expr()` to process the tokens and statements.   - Nesting Levels: The depth of branches and loops depends on the structure of the `if` and `while` statements. The nesting is moderate, with each loop or branch nesting inside the previous one in the `stmt()` and `expr()` functions.  7. **Warnings**: // I used a website called codacy for this part    - **Cyclomatic complexity greater than 15** for the `next`, `main`, and `expr` functions.   - **LOC greater than 50** for `next`, `expr`, and `main` functions.   - **Potential security issue**: Check buffer boundaries in `read` calls within loops (lines 456 and 621).// the only tool that worked on my laptop was lizard and I was only able to get data for the first 3 parts of this task. I tried looking for alternatives, and found a website called “codacy”; but unfortunately, it also doesn’t cover part 4,5, and 6.